#!/bin/sh

# parse options
while [ -n "$1" ]; do
	case "$1" in
		--url) export URL="$2"; shift;;
		--interval) export INTERVAL=$2; shift;;
		--verify-ssl) export VERIFY_SSL=$2; shift;;
		--uuid) export UUID="$2"; shift;;
		--key) export KEY="$2"; shift;;
		--shared-secret) export SHARED_SECRET="$2"; shift;;
		-*)
			echo "Invalid option: $1"
			exit 1
		;;
		*) break;;
	esac
	shift;
done

if [ -z "$URL" ]; then
		logger -s "missing required --url option" \
			   -t "openwisp" \
			   -p 3
		exit 1
fi

if ([ -z "$UUID" ] || [ -z "$KEY" ]) && [ -z "$SHARED_SECRET" ]; then
		logger -s "you must either specify --uuid and --key, or --shared-secret" \
			   -t "openwisp" \
			   -p 3
		exit 1
fi

INTERVAL=${INTERVAL:-120}
VERIFY_SSL=${VERIFY_SSL:-1}
WORKING_DIR="/tmp/openwisp"
CONFIGURATION_ARCHIVE="$WORKING_DIR/configuration.tar.gz"
CHECKSUM_RESPONSE="$WORKING_DIR/checksum_response"
CONFIGURATION_CHECKSUM="$WORKING_DIR/configuration_checksum"
REGISTRATION_PARAMETERS="$WORKING_DIR/registration_parameters"
REGISTRATION_URL="$URL/controller/register/"
FETCH_COMMAND="curl -s"
mkdir -p $WORKING_DIR

if [ "$VERIFY_SSL" != "1" ]; then
	FETCH_COMMAND="$FETCH_COMMAND -k"
fi

check_header(){
	local is_controller=$(grep -c "X-Openwisp-Controller: true" $1)
	if [ $is_controller -lt 1 ]; then
		logger -s "Invalid url: missing X-Openwisp-Controller header" \
			   -t "openwisp" \
			   -p 3
		exit 1
	fi
}

register() {
	logger -s "Registering new device" \
		   -t "openwisp" \
		   -p 6
	# gets the mac address of the first interface that shows in ifconfig
	local name=$(ifconfig | grep -v lo | grep HWaddr | awk '/HWaddr/ { print $5 }' | head -n 1)
	local backend="netjsonconfig.OpenWrt"
	local params="secret=$SHARED_SECRET&name=$name&backend=$backend"
	$($FETCH_COMMAND -i --data $params $REGISTRATION_URL > $REGISTRATION_PARAMETERS)
	# abort if anything goes wrong
	check_header $REGISTRATION_PARAMETERS
	if [ $(grep -c "HTTP/1.0 201 Created" $REGISTRATION_PARAMETERS) -lt 1 ]; then
		local message=$(cat $REGISTRATION_PARAMETERS | grep "error:")
		logger -s "Registration failed! $message" \
			   -t "openwisp" \
			   -p 3
		exit 1
	fi
	# set configuration option and reload
	UUID=$(cat $REGISTRATION_PARAMETERS | grep uuid | awk '/uuid: / { print $2 }')
	KEY=$(cat $REGISTRATION_PARAMETERS | grep key | awk '/key: / { print $2 }')
	uci set openwisp.http.uuid=$UUID
	uci set openwisp.http.key=$KEY
	uci set openwisp.http.shared_secret=""
	uci commit
	rm $REGISTRATION_PARAMETERS
	logger -s "Device registered successfully as $name, id: $UUID" \
		   -t "openwisp" \
		   -p 6
}

configuration_changed() {
	$($FETCH_COMMAND -i $CHECKSUM_URL > $CHECKSUM_RESPONSE)

	if [ "$?" != "0" ]; then
		logger -s "Could not retrieve checksum from controller" \
		       -t "openwisp" \
		       -p 3
		return 2
	fi

	if [ $(grep -c "HTTP/1.0 200 OK" $CHECKSUM_RESPONSE) -lt 1 ]; then
		local status=$(head -n 1 $CHECKSUM_RESPONSE)
		logger -s "Failed to retrieve checksum, got: $status" \
			   -t "openwisp" \
			   -p 3
		exit 1
	fi
	check_header $CHECKSUM_RESPONSE

	local REMOTE_CHECKSUM=$(tail -n 1 $CHECKSUM_RESPONSE)
	local LOCAL_CHECKSUM=$(cat $CONFIGURATION_CHECKSUM)

	if [ "$LOCAL_CHECKSUM" != "$REMOTE_CHECKSUM" ]; then
		# store checksum
		printf $REMOTE_CHECKSUM > $CONFIGURATION_CHECKSUM
		logger -s "Configuration in controller has changed" \
		       -t "openwisp" \
		       -p 6
		return 1
	fi

	return 0
}

update_configuration() {
	# download configuration
	$($FETCH_COMMAND $CONFIGURATION_URL -o $CONFIGURATION_ARCHIVE)

	if [ "$?" != "0" ]; then
		logger -s "Could not retrieve configuration from controller" \
		       -t "openwisp" \
		       -p 3
		return 3
	fi

	# restore configuration
	sysupgrade -r $CONFIGURATION_ARCHIVE

	if [ "$?" != "0" ]; then
		logger -s "Could not restore configuration" \
		       -t "openwisp" \
		       -p 2
		return 4
	fi

	/usr/sbin/apply_config

	logger -s "Configuration restored and applied" \
	       -t "openwisp" \
	       -p 6
}

# ensure both UUID and KEY are defined
# otherwise perform registration
if [ -z "$UUID" ] || [ -z "$KEY" ]; then
	register
fi

# these variables are evaluated here because "register()" might set UUID and KEY
CONFIGURATION_URL="$URL/controller/download-config/$UUID/?key=$KEY"
CHECKSUM_URL="$URL/controller/checksum/$UUID/?key=$KEY"

while true
do
	configuration_changed

	if [ "$?" == "1" ]; then
		update_configuration
	fi

	sleep $INTERVAL
done
