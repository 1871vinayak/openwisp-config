#!/bin/sh

# parse options
while [ -n "$1" ]; do
	case "$1" in
		--url) export URL="$2"; shift;;
		--interval) export INTERVAL=$2; shift;;
		--verify-ssl) export VERIFY_SSL=$2; shift;;
		--uuid) export UUID="$2"; shift;;
		--key) export KEY="$2"; shift;;
		--shared-secret) export SHARED_SECRET="$2"; shift;;
		--test-config) export TEST_CONFIG="$2"; shift;;
		--test-script) export TEST_SCRIPT="$2"; shift;;
		-*)
			echo "Invalid option: $1"
			exit 1
		;;
		*) break;;
	esac
	shift;
done

if [ -z "$URL" ]; then
		logger -s "missing required --url option" \
			   -t "openwisp" \
			   -p 3
		exit 2
fi

if ([ -z "$UUID" ] || [ -z "$KEY" ]) && [ -z "$SHARED_SECRET" ]; then
		logger -s "you must either specify --uuid and --key, or --shared-secret" \
			   -t "openwisp" \
			   -p 3
		exit 3
fi

INTERVAL=${INTERVAL:-120}
VERIFY_SSL=${VERIFY_SSL:-1}
TEST_CONFIG=${TEST_CONFIG:-1}
WORKING_DIR="/tmp/openwisp"
BASEURL="$URL/controller"
CONFIGURATION_ARCHIVE="$WORKING_DIR/configuration.tar.gz"
CONFIGURATION_CHECKSUM="$WORKING_DIR/checksum"
CONFIGURATION_BACKUP="$WORKING_DIR/backup.tar.gz"
REGISTRATION_PARAMETERS="$WORKING_DIR/registration_parameters"
TEST_CHECKSUM="$WORKING_DIR/test_checksum"
STATUS_REPORT="$WORKING_DIR/status_report"
REGISTRATION_URL="$URL/controller/register/"
FETCH_COMMAND="curl -s"
mkdir -p $WORKING_DIR

if [ "$VERIFY_SSL" != "1" ]; then
	FETCH_COMMAND="$FETCH_COMMAND -k"
fi

# ensures we are dealing with the right web server
check_header(){
	local is_controller=$(grep -c "X-Openwisp-Controller: true" $1)
	if [ $is_controller -lt 1 ]; then
		logger -s "Invalid url: missing X-Openwisp-Controller header" \
			   -t "openwisp" \
			   -p 3
		exit 4
	fi
}

# performs automatic registration
register() {
	logger -s "Registering new device" \
		   -t "openwisp" \
		   -p 6
	# gets the mac address of the first interface that shows in ifconfig
	local name=$(ifconfig | grep -v lo | grep HWaddr | awk '/HWaddr/ { print $5 }' | head -n 1)
	local backend="netjsonconfig.OpenWrt"
	local params="secret=$SHARED_SECRET&name=$name&backend=$backend"
	$($FETCH_COMMAND -i --data $params $REGISTRATION_URL > $REGISTRATION_PARAMETERS)
	# abort if anything goes wrong
	check_header $REGISTRATION_PARAMETERS
	if [ $(head -n 1 $REGISTRATION_PARAMETERS | grep -c "201 Created") -lt 1 ]; then
		local message=$(cat $REGISTRATION_PARAMETERS | grep "error:")
		logger -s "Registration failed! $message" \
			   -t "openwisp" \
			   -p 3
		exit 5
	fi
	# set configuration options and reload
	export UUID=$(cat $REGISTRATION_PARAMETERS | grep uuid | awk '/uuid: / { print $2 }')
	export KEY=$(cat $REGISTRATION_PARAMETERS | grep key | awk '/key: / { print $2 }')
	uci set openwisp.http.uuid=$UUID
	uci set openwisp.http.key=$KEY
	# remove shared secret to avoid accidental re-registration
	uci set openwisp.http.shared_secret=""
	uci commit
	rm $REGISTRATION_PARAMETERS
	logger -s "Device registered successfully as $name, id: $UUID" \
		   -t "openwisp" \
		   -p 6
}

# gets checksum from controller
get_checksum() {
	$($FETCH_COMMAND -i $CHECKSUM_URL > $1)
	local exit_code=$?

	if [ "$exit_code" != "0" ]; then
		logger -s "Failed to connect to controller (checksum): curl exit code $exit_code" \
		       -t "openwisp" \
		       -p 3
		return 2
	fi

	if [ $(head -n 1 $1 | grep -c "200 OK") -lt 1 ]; then
		local status=$(head -n 1 $1)
		logger -s "Failed to retrieve checksum: $status" \
			   -t "openwisp" \
			   -p 3
		return 3
	fi
	check_header $1
}

# returns 1 if configuration in controller has changed
configuration_changed() {
	local CURRENT_CHECKSUM=$(tail -n 1 $CONFIGURATION_CHECKSUM)
	get_checksum $CONFIGURATION_CHECKSUM
	local exit_code=$?

	if [ "$exit_code" != "0" ]; then
		return $exit_code
	fi

	local REMOTE_CHECKSUM=$(tail -n 1 $CONFIGURATION_CHECKSUM)

	if [ "$CURRENT_CHECKSUM" != "$REMOTE_CHECKSUM" ]; then
		logger -s "Configuration in controller has changed" \
		       -t "openwisp" \
		       -p 6
		return 1
	fi

	return 0
}

# applies a specified configuration archive
apply_configuration() {
	# -r restores a configuration archive
	sysupgrade -r $1
	local exit_code=$?

	if [ "$exit_code" != "0" ]; then
		logger -s "Could not restore configuration: sysupgrade exit code $exit_code" \
		       -t "openwisp" \
		       -p 2
		return 1
	fi
	# apply changes and wait 2 seconds
	/usr/sbin/apply_config
	sleep 2
}

# report configuration status: "running" or "error"
report_status() {
	$($FETCH_COMMAND -i --data "key=$KEY&status=$1" $REPORT_URL > $STATUS_REPORT)
	local exit_code=$?

	if [ "$exit_code" != "0" ]; then
		logger -s "Failed to connect to controller (report-status): curl exit code $exit_code" \
		       -t "openwisp" \
		       -p 3
		return 2
	fi

        if [ $(head -n 1 $STATUS_REPORT | grep -c "200 OK") -lt 1 ]; then
                local status=$(head -n 1 $STATUS_REPORT)
                logger -s "Failed to report status: $status" \
                           -t "openwisp" \
                           -p 3
                return 3
        fi
	check_header $STATUS_REPORT
	rm $STATUS_REPORT
}

# performs configuration test and reports result
test_configuration() {
	sysupgrade -b $CONFIGURATION_BACKUP

	apply_configuration $1

	if [ -z "$TEST_SCRIPT" ]; then
		get_checksum $TEST_CHECKSUM
		local test_ret=$?
		rm $TEST_CHECKSUM
	else
		$TEST_SCRIPT
		local test_ret=$?
	fi

	if [ $test_ret -gt 0 ]; then
		logger -s "Configuration test failed! Restoring previous backup" \
		       -t "openwisp" \
		       -p 3
		apply_configuration $CONFIGURATION_BACKUP
		report_status "error"
		local ret=1
	else
		report_status "running"
		local ret=0
	fi

	rm $CONFIGURATION_BACKUP
	return $ret
}

# downloads configuration from controller
# performs test (if testing enabled)
# and applies it
update_configuration() {
	# download configuration
	$($FETCH_COMMAND $CONFIGURATION_URL -o $CONFIGURATION_ARCHIVE)
	local exit_code=$?

	if [ "$exit_code" != "0" ]; then
		logger -s "Failed to connect to controller (download configuration): curl exit code $exit_code" \
		       -t "openwisp" \
		       -p 3
		return 3
	fi

	if [ "$TEST_CONFIG" == "1" ]; then
		test_configuration $CONFIGURATION_ARCHIVE
	else
		apply_configuration $CONFIGURATION_ARCHIVE
	fi

	if [ "$?" == "0" ]; then
		logger -s "Configuration applied" \
		       -t "openwisp" \
		       -p 6
	fi
}

# ensure both UUID and KEY are defined
# otherwise perform registration
if [ -z "$UUID" ] || [ -z "$KEY" ]; then
	register
fi

# these variables are evaluated here because "register()" might set UUID and KEY
CONFIGURATION_URL="$BASEURL/download-config/$UUID/?key=$KEY"
CHECKSUM_URL="$BASEURL/checksum/$UUID/?key=$KEY"
REPORT_URL="$BASEURL/report-status/$UUID/"

while true
do
	configuration_changed

	if [ "$?" == "1" ]; then
		update_configuration
	fi

	sleep $INTERVAL
done
